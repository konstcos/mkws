<?phpclass mkws{// Переменные сайта    // переключатель сценариев сайта    private $switch;    // имя сайта    private $site_name;    // корневая рабочая папка сайта    private $work_root;    // корневая системная папка сайта    private $sys_root;    // корневая папка для бэкапов    private $backup_root;    // рабочая папка сайта    private $work_path;    // системная папка сайта    private $sys_path;    // папка для бэкапов    private $backup_path;    // список доступных файлов    private $available_sites;    // установка шаблона дефолтного файла index.html    private $def_index = '<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8"><title>Dokument</title><style>body{color: gray;background: black;}</style></head><body><h1>Site</h1></body></html>';    // указатель на то, что сайт создавать ненужно, и пустое имя это не ошибка    private $dont_create_site = false;    private $dont_dell_site = false;    // Номер удаляемого сайта    private $dell_site_id;    // Имя файла conf    private $conf_name;    // Имя и полный путь к файлу conf    private $conf_file_path;// Конструктор    public function __construct()    {        $this->clear_screen();        // проверка на рут, если не рут - выходим        if(posix_getuid()!==0){            echo "\n\tНужны права root\n\n";            exit();        }    }// Воспомогательные функции    // Очистка экрана    public function clear_screen()    {        system("clear");    }    // проверка ключевых переменных    private function test_var()    {        // Проверка на существование пути рабочей папки        if(empty($this->work_root)){            $this->clear_screen();            echo "\n\tНе задана рабочая папка сайта \n\n";            exit();        }        // Проверка на существование системной папки сайта        if(empty($this->sys_root)){            $this->clear_screen();            echo "\n\tНе задана системная папка сайта \n\n";            exit();        }    // Проверка на существование папки бэкапов        if(empty($this->backup_root)){            $this->clear_screen();            echo "\n\t Не задана папка бэкапов! \n\n";            echo "\t Удаление папки сайта включает создание \n";            echo "\t резервной копии его содержания. \n\n";            echo "\t Поэтому без задание этой папки \n";            echo "\t нельзя продолжать работу скрипта. \n";            echo "\n";            exit();        }    }    // сканирование папки и очистка от точек    private function scan_folder($folder_path)    {        $get_data = scandir($folder_path);        $dot_filter = array_diff($get_data, array('.', '..'));        return $dot_filter;    }    // Возвращает размер папки    public function dirsize($path){        $total_count = 0;        $path_content = $this->scan_folder($path);        foreach($path_content as $item){            if(is_file("$path/$item")){                $total_count += filesize("$path/$item");            } elseif(is_dir("$path/$item")){                $total_count += $this->dirsize("$path/$item");            } else {                echo "\n\n";                echo "\t Странно, это '$path/$item' и не папка, и не файл \n";                echo "\t ошибка в функции 'dirsize()' \n";                echo "\n\n";            }        }        return $total_count;    }    // Установка разрешений на папку    public function set_perm_currentUser($path, $perm = 755)    {        // Обработка заданных прав        $mode = '0' .$perm;        // смена рутованного владельца        if (chown($path, get_current_user()) == false) {            echo "\n";            echo "Не получилось сменить владельца файла " . $path . "\n";            echo "\n";            exit();        }        // смена группы        if(chgrp($path, get_current_user()) == false){            echo "\n";            echo "Не получилось сменить группу файла " .$path ."\n";            echo "\n";            exit();        }        // установка прав        if(chmod($path, octdec($mode)) == false){            echo "\n";            echo "Не получилось присвоить права '$perm' папке $path \n";            echo "\n";            exit();        }    }    // удаление дирректории    public function dellFolder($path)    {        if(is_file($path)){            unlink($path);        }elseif(is_dir($path)){            $scan_data = $this->scan_folder($path);            foreach($scan_data as $item){                $this->dellFolder("$path/$item");            }            rmdir($path);        }else {            echo  "\n\n\t Не могу удалить $path,\n\t ...не определяется ни как папка, ни как файл. \n\n";        }    }// Переключатель    // установка переключателя    private function set_switch()    {        $this->clear_screen();        echo "\n1. Создать сайт\n2. Удалить сайт\n\n";        echo "> ";        $sw = readline();        switch($sw){            case 1:                $this->switch = 'create a website';                break;            case 2:                $this->switch = 'remove site';                break;            default:                $this->switch = 'Error in function set_switch, wrong parameter';        }    }    // установка задания для сценария сайта    public function which_task()    {        $this->test_var();        $this->set_switch();    }    // получение данных переключателя    public function get_switch()    {        return $this->switch;    }// Рабочая папка сайта    public function set_work_root($path)    {        $this->work_root = $path;    }    public function get_work_root()    {        return $this->work_root;    }    public function work_root()    {        return $this->get_work_root();    }// Системная папка сайта    public function set_sys_root($path)    {        $this->sys_root = $path;    }    public function get_sys_root()    {        return $this->sys_root;    }    public function sys_root()    {        $this->get_sys_root();    }// Папка для бэкапов    public function set_backup_root($path)    {        $this->backup_root = $path;    }    public function get_backup_root()    {        return $this->backup_root;    }    public function backup_root()    {        $this->get_backup_root();    }// Шаблоны сайта    public function set_def_index(){    }// Создание сайта    // Получение имени сайта    public function enter_site_name(){        $site_exist = '';        while(true){            // очистка экрана            $this->clear_screen();            if(empty($site_exist)){                echo "\n  \n";            } else {                echo "\n\t$site_exist \n";            }            // Запрос на ввод имени сайта            echo "\nИмя сайта\n> ";            $sName = trim(readline());            if($sName == ''){                $this->clear_screen();                $this->dont_create_site = true;                break;            }            if(file_exists($this->work_root .'/' .$sName)==false){                if(file_exists($this->sys_root .'/' .$sName)==false) {                    $this->site_name = $sName;                    $this->work_path = $this->work_root . '/' . $this->site_name;                    $this->sys_path = $this->sys_root . '/' . $this->site_name;                    break;                } else {                    $site_exist = $sName ." уже существует в " .$this->sys_root;                }            } else {                $site_exist = $sName ." уже существует в " .$this->work_root;            }        }        $this->clear_screen();    }    // Создание рабочей папки сайта    public function make_work_folder()    {        // проверка имени сайта на существование        if(empty($this->site_name)==true & $this->dont_create_site == false){                $this->clear_screen();                echo "\n";                echo "Имя сайта оказалось не заданным \n";                echo "До этой функции 'make_work_folder' нужно запускать функцию 'enter_site_name' \n";                echo "Иначе имя сайта будет пустым и программа остановится \n";                echo "(Это одна из возможных причин) \n";                echo "\n";                exit();        }        // защита чтобы не создавалась папка с именем " " и т.д.        if($this->site_name != ''){            // проверка имени рабочей папки на повторение            if(file_exists($this->work_path)==true){                echo "\n";                echo "Оказывается, что папка " . $this->site_name . " уже существует в " . $this->work_root . "\n";                echo "Такого вообще недолжно было произойти, где то в программе серьезная ошибка \n";                echo "\n";                exit();            }            // создание рабочей папки            if(mkdir($this->work_path)==false){                echo "\n";                echo "Возникла ошибка в создании этой папки: \n";                echo $this->work_path ."\n";                echo "\n";                exit();            }            // Установка прав            $this->set_perm_currentUser($this->work_path);        }        // создание в папке дефолтного файла index.php        $indexDef = $this->def_index;        $indexPath = $this->work_path .'/index.html';        file_put_contents($indexPath, $indexDef);        // Установка прав        $this->set_perm_currentUser($indexPath);    }    // Создание системной папки сайта    public function make_sys_folder()    {        // проверка имени сайта на существование        if(empty($this->site_name) == true & $this->dont_create_site == false){                $this->clear_screen();                echo "\n";                echo "Имя сайта оказалось не заданным \n";                echo "До этой функции 'make_sys_folder' нужно запускать функцию 'enter_site_name' \n";                echo "Иначе имя сайта будет пустым и программа остановится \n";                echo "(Это одна из возможных причин) \n";                echo "\n";                exit();        }        // защита чтобы не создавалась папка с именем " " и т.д.        if($this->site_name != ''){            // проверка имени системной папки на повторение            if(file_exists($this->sys_path)==true){                echo "\n";                echo "Оказывается, что папка " . $this->site_name . " уже существует в " . $this->sys_root . "\n";                echo "Такого вообще недолжно было произойти, где то в программе серьезная ошибка \n";                echo "\n";                exit();            }            // создание системной папки            if(mkdir($this->sys_path)==false){                echo "\n";                echo "Возникла ошибка в создании этой папки: \n";                echo $this->sys_path ."\n";                echo "\n";                exit();            }        }    }    // Связывание папок    public function bind_folders()    {        if($this->dont_create_site == false) {            // монтирование образа            $mount = "mount --bind $this->work_path $this->sys_path";            system($mount);            // создание ссылки в fstab            $fstab = file_get_contents('/etc/fstab');            $fstab .= "\n$this->work_path $this->sys_path     none   bind";            file_put_contents('/etc/fstab', $fstab);        }    }    // Создание файла conf    public function make_conf()    {    // Формирование имени файла conf        $conf_name = str_replace('.', '', $this->site_name) .'.conf';    // Создание содержания файла conf        $conf_content = "";        $conf_content .= "<VirtualHost *:80>\n";        $conf_content .= "\n";        $conf_content .= "\tServerName $this->site_name \n";        $conf_content .= "\tServerAlias www.$this->site_name \n";        $conf_content .= "\n";        $conf_content .= "\tDocumentRoot /var/www/$this->site_name \n";        $conf_content .= "\n";        $conf_content .= "\tServerAdmin webmaster@$this->site_name \n";        $conf_content .= "\n";        $conf_content .= "\tErrorLog " .'${APACHE_LOG_DIR}' ."/error.log \n";        $conf_content .= "\tCustomLog " .'${APACHE_LOG_DIR}' ."/access.log combined \n";        $conf_content .= "\n";        $conf_content .= "\t<Directory '/var/www/" .$this->site_name ."/'>\n";        $conf_content .= "\t\tAllowOverride All\n";        $conf_content .= "\t</Directory>\n";        $conf_content .= "</VirtualHost>\n\n";    // Создание файла conf        $this->conf_name = $conf_name;        $this->conf_file_path = "/etc/apache2/sites-available/$conf_name";        file_put_contents($this->conf_file_path, $conf_content);        return null;    }    // Включаем сайт    public function enable_conf()    {    // $eneble_data = "a2ensite $this->conf_file_path";        $enable_data = "a2ensite $this->conf_name";        system($enable_data);    }    // Добавление ip в hosts    public function add_hosts()    {        $hosts_path = '/etc/hosts';        $hosts = file_get_contents($hosts_path);        $hosts .= "\n127.0.0.1 $this->site_name";        file_put_contents($hosts_path, $hosts);        return null;    }    // Перезагрузка сервера    public function apache_restart()    {        system('/etc/init.d/apache2 restart');        $this->clear_screen();        return null;    }    // Открытие сайта в браузере    public function site_open()    {        system("iceweasel $this->site_name");        return null;    }// Удаление сайта    // все сайты в рабочей папке    private function all_available_sites()    {        $files = $this->scan_folder($this->sys_root);        $sites = [];        $count = 1;        foreach($files as $item){            $sites[$count] = $item;            ++$count;        }        return $sites;    }    // доступные сайты    public function set_available_sites($lock_sites=[])    {        // проверка заданного параметра        if(count($lock_sites)==0){            $this->clear_screen();            echo "\n";            echo "\tПараметр, который передан в функцию \n";            echo "\t'set_available_sites()' пустой. \n";            echo "\tЛибо, в функцию вообще не передан параметр, \n";            echo "\tв этом случае функцию лучше вообще убрать \n";            echo "\n";            exit();        }        $get_data = $this->all_available_sites();        $filter = array_diff($get_data, $lock_sites);        $sites = [];        $count = 1;        foreach($filter as $item){            $sites[$count] = $item;            ++$count;        }        if(count($sites) == 0){            $this->available_sites = 'none';        } else {            $this->available_sites = $sites;        }    }    // вывод доступных сайтов    private function display_available_sites()    {        $this->clear_screen();        if($this->available_sites == 'none'){            return null;        }        if(empty($this->available_sites)){            $this->available_sites = $this->all_available_sites();        }        echo "\n";        foreach($this->available_sites as $num => $site){            echo $num .'. ' .$site ."\n";        }        echo "\n";    }    // ввод удаляемого сайта    public function enter_dell_site()    {        $site_not_exist = '';        while(true){            $this->clear_screen();            if($this->available_sites == 'none'){                $this->clear_screen();                echo "\nНет сайтов для удаления    ";                sleep(2);                $this->clear_screen();                return;            } else {                $this->display_available_sites();            }            echo "\n";            echo "\t" .$site_not_exist ."\n";            // Запрос на ввод имени сайта            echo "\nкакой сайт удаляем?\n> ";            $sName = trim(readline());            if($sName == ''){                $this->dont_dell_site = true;                $this->clear_screen();                break;            }            if(empty($this->available_sites[$sName])==false){                $this->dell_site_id = $sName;                $this->site_name = $this->available_sites[$sName];                // установить переменные path                $this->work_path = $this->work_root .'/' .$this->site_name;                $this->sys_path = $this->sys_root .'/' .$this->site_name;                $this->backup_path = $this->backup_root .'/' .$this->site_name;                break;            }            $site_not_exist = "Сайта с индексом '$sName' не существует";        }    }    // Размонтируем папку и удаляем задание на монтирование в fstab    public function ubind_folder()    {        if($this->dont_dell_site == false) {            if($this->available_sites != 'none') {                $work_path = $this->work_path;                $sys_path = $this->sys_path;            // Размонтируем системную папку                system("umount $sys_path");            // Удаляем пометку из fstab                // Открываем файл fstab                $get_data = file_get_contents("/etc/fstab");                // проверяем есть ли такая точка монтирования в fstab                $mount_point = "\n$work_path $sys_path     none   bind";                // если есть - удаляем                if (strpos($get_data, $mount_point) == true) {                    $data = str_replace($mount_point, '', $get_data);                    file_put_contents("/etc/fstab", $data);                }            }        }    }    // Резервируем все данные в рабочей папке сайта    public function make_backup()    {    // указание на пропуск если true        if($this->dont_dell_site == false) {            if ($this->available_sites != 'none') {            // проверить содержание                $files = $this->scan_folder($this->work_path);                $count = count($files);                $content = '';            // если папка пуста - выйти из функции ничего не делая                if ($count == 0) {                    return null;                }            // если только один файл index стандартного содержания - выйти из функции ничего не делая                if ($count == 1) {                    foreach($files as $f){                        $content = file_get_contents("$this->work_path/$f");                    }                    if($content == $this->def_index){                        return null;                    }                }            // сверить размер диска и папки с сайтом, если папка превышает свободное место - выдать ошибку                $disk_free_space = disk_free_space($this->work_path);                $folder_space = $this->dirsize($this->work_path);                if($disk_free_space < $folder_space){                    $this->clear_screen();                    echo "\n\t Размер папки превышает свободное место на диске \n";                    echo "\t освободите свободное пространство на диске, либо \n";                    echo "\t удалите содержание рабочей папки сайта '$this->work_path' самостоятельно. \n";                    echo "\n\t Иначе нельзя сделать резервную копию сайта. Работа скрипта остановлена.";                    echo "\n\n";                    exit();                }            // если файл больше 200мб - сообщить об этом и запросить подтверждение                if($folder_space > 209715200){                    while(true) {                        $this->clear_screen();                        echo "\n";                        echo "\t Размер папки превышает 200мб \n ";                        echo "\t Данные могут долго упаковываться и займут много места на диске. \n";                        echo "\t Продолжаем? \n\n";                        echo "\t y(ДА), n(НЕТ) \n";                        echo "\t > ";                        $chose = trim(readline());                        if ($chose == 'n') {                            $this->clear_screen();                            echo "\n\tВыход из-за превышения размера (200мб) \n\n";                            exit();                        } elseif ($chose == 'y') {                            break;                        }                    }                }            // проверка на существование папки с таким именем в бэкапах, и если нет - создать ее                if(file_exists($this->backup_path) == false){                    mkdir($this->backup_path);                    $this->set_perm_currentUser($this->backup_path);                }            // создать из папки архив tar.7z                $time = strftime("%Y-%m-%d_%H-%M-%S");                $arch_path = $this->work_path;                $arch_target = "$this->backup_path/$this->site_name" ."_$time.tar.7z";                $backup_qery = "cd $arch_path; tar cf - * | 7za u -si -t7z -mx9 $arch_target";                exec($backup_qery);                $this->set_perm_currentUser($arch_target);            }        }    }    // Удаляем рабочую папку сайта    public function dell_work_folder()    {        if($this->dont_dell_site == false) {            if ($this->available_sites != 'none') {                $this->dellFolder($this->work_path);            }        }        return null;    }    // Удаляем системную папку сайта    public function dell_sys_folder()    {        if($this->dont_dell_site == false) {            if ($this->available_sites != 'none') {                $this->dellFolder($this->sys_path);            }        }        return null;    }    // удаляем файлы conf    public function dell_conf()    {        if($this->dont_dell_site == false) {            if ($this->available_sites != 'none') {                $name = str_replace('.', '', $this->site_name) . '.conf';                unlink("/etc/apache2/sites-available/" . $name);                unlink("/etc/apache2/sites-enabled/" . $name);                return null;            }        }    }    // очищаем hosth    public function clear_hosts()    {        if ($this->dont_dell_site == false) {            if ($this->available_sites != 'none') {                // Открываем файл hosts                $get_data = file_get_contents("/etc/hosts");                // проверяем есть ли такая точка монтирования в fstab                $hosts = "\n127.0.0.1 $this->site_name";                // если есть - удаляем                if (strpos($get_data, $hosts) == true) {                    $data = str_replace($hosts, '', $get_data);                    file_put_contents("/etc/hosts", $data);                }            }        }    }}